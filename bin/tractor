#!/usr/bin/env node
'use strict';

// Polyfill:
require('babel-polyfill');

// Dependencies:
let tractor = require('commander');
let info = require('../package.json');

// Actions:
let { init } = require('../dist/init');
let { start } = require('../dist/start');
let { upgrade } = require('../dist/upgrade');

let { getConfig } = require('tractor-config-loader');
let { container } = require('tractor-dependency-injection');
let { getPlugins } = require('tractor-plugin-loader');

let di = container();

tractor
.version(info.version)
.option('-c, --config [value]', 'Path to configuration file (defaults to ./tractor.conf.js)')

tractor
.command('init')
.description('initialise tractor in a project')
.action(function () {
    initDIConstants(tractor.config);
    return di.call(init);
});

tractor
.command('start')
.description('Start the tractor server')
.action(function () {
    initDIConstants(tractor.config);
    return di.call(start);
});

tractor
.command('upgrade')
.description('Upgrade tractor plugin files')
.action(function () {
    initDIConstants(tractor.config);
    return di.call(upgrade);
});

tractor.parse(process.argv);

function initDIConstants (configPath) {
    let config = getConfig(configPath);
    let plugins = getPlugins();
    di.constant({ config, plugins });
}
