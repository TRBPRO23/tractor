#!/usr/bin/env node
'use strict';

// Polyfill:
require('@babel/polyfill');

// Promisify:
const { promisifyAll } = require('bluebird');
promisifyAll(require('fs'));

// Dependencies:
const tractor = require('commander');
const { version } = require('../package.json');

// Actions:
const { init, patch, start, upgrade } = require('../dist');

const { getConfig } = require('@tractor/config-loader');
const { container } = require('@tractor/dependency-injection');
const { getPlugins } = require('@tractor/plugin-loader');

const di = container();

tractor
.version(version)
.option('-c, --config [value]', 'Path to configuration file (defaults to ./tractor.conf.js)');

tractor
.command('init')
.description('initialise tractor in a project')
.action(() => {
    initDIConstants(tractor.config);
    return di.call(init);
});

tractor
.command('patch')
.description('Patch protractor/selenium to resolve issues')
.action(patch);

tractor
.command('start', { isDefault: true })
.description('Start the tractor server')
.action(() => {
    initDIConstants(tractor.config);
    return di.call(start);
});

tractor
.command('upgrade')
.description('Upgrade tractor plugin files')
.action(() => {
    initDIConstants(tractor.config);
    return di.call(upgrade);
});

tractor.parse(process.argv);

function initDIConstants (configPath) {
    const config = getConfig(configPath);
    const plugins = getPlugins(config);
    di.constant({ config, plugins });
}
